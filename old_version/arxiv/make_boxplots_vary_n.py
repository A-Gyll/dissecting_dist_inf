import matplotlib
matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['ps.fonttype'] = 42

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import argparse
import matplotlib as mpl
mpl.rcParams['figure.dpi'] = 300


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--darkplot', action="store_true",
                        help='Use dark background for plotting results')
    parser.add_argument('--legend', action="store_true",
                        help='Add legend to plots')
    parser.add_argument('--novtitle', action="store_true",
                        help='Remove Y-axis label')
    parser.add_argument('--dash', action="store_true",
                        help='Add dashed line midway?')
    args = parser.parse_args()

    first_cat = " 0.5"

    if args.darkplot:
        # Set dark background style
        plt.style.use('dark_background')

    # Set font size
    # plt.rcParams.update({'font.size': 18})
    plt.rcParams.update({'font.size': 14})

    data = []
    columns = [
        r'Mean-degree of training data ($\alpha$)',
        "Accuracy (%)",
        'Layers'
    ]

    categories = ["9", "10", "11", "12", "14", "15", "16", "17"]
    raw_data = {
        "All": {
            10: [
                [52.8, 47.95, 50.15, 71, 57.85],
                [50.25, 54, 50, 54.15, 49.95],
                [50.1, 50.7, 49.75, 49.95, 50],
                [50.35, 50.5, 49.8, 50.6, 50.9],
                [50.2, 49.65, 49.4, 50, 49.35],
                [51.45, 53.15, 55.5, 51.6, 53.6],
                [49.25, 58.8, 47.65, 52.1, 51.5],
                [51.13, 50.18, 52.38, 64.98, 50.07]

            ],
            20: [
                [50.55, 52.1, 56.4, 52.1, 51.15],
                [46.45, 50.05, 59.35, 51.85, 52.9],
                [50.8, 49.95, 52.5, 55.2, 50.25],
                [50, 48.75, 54.55, 50.35, 49.75],
                [49.4, 48.55, 60.95, 51.45, 50.5],
                [51.45, 60.15, 53.1, 51.4, 50.55],
                [51.8, 55.25, 65.4, 53.85],
                [66.49, 62.12, 100, 50.83, 60.66]
            ],
            40: [
                [58.8, 62.3, 58.4, 75.3, 99.75],
                [92.85, 80.2, 56, 54.1, 78.05],
                [52.7, 51.6, 52.8, 58.2, 53.55],
                [48.55, 49.25, 51.7, 50.1, 51.25],
                [47.35, 51, 52.85, 51.7, 49.65],
                [53.55, 63.05, 99.8, 53.25, 72.75],
                [51.65, 59.6, 100, 89.5, 48.45],
                [98.25, 98.7, 53.04, 100, 50.98]
            ],
            100: [
                [60.4, 59.55, 60.65, 93.15, 63.4],
                [66.1, 60.6, 93.4, 58.7, 60],
                [94.1, 55.1, 54.45, 50.75, 53.15],
                [48.95, 52.9, 52.55, 50.45, 50.2],
                [51.5, 51.05, 50.55, 52.1, 53.45],
                [88.65, 62, 60.05, 100, 52.45],
                [74.3, 68.5, 67.55, 99.95, 88.3],
                [97.54, 90.02, 49.83, 83.89, 99.8]

            ],
            1600: [
                [99.7, 99.5, 97.7],
                [99.05, 94.4, 92.65],
                [93, 90.5, 93.75],
                [96.1, 84.1, 93.45],
                [87.2, 92.9, 90.5],
                [98.34, 89.45, 99.95, 99.95, 96.93, 100, 92.3, 100],
                [99.9, 99.9, 95.4],
                [100, 100, 99.9, 99.3, 99.5, 98.3, 100, 98.5, 100]
            ]
        },
        "First Layer": {
            10: [
                [62.4, 99.45, 99.05, 86.9, 100],
                [85.95, 98.95, 84.8, 86.85],
                [63.3, 85.05, 98.35, 88.55],
                [88.75, 92.05, 85.65, 57.7, 78.75],
                [62.15, 55.1, 62.65, 79.7],
                [89.4, 99.2, 97.95, 100, 97.75],
                [99.4, 100, 99.95, 100, 99.95],
                [100, 100, 100, 100, 100]
            ],
            20: [
                [98.1, 85.1, 99.75, 98.9, 93.6],
                [94.9, 100, 72.6, 99.05],
                [95.5, 53.4, 98.55, 94.65, 98.85],
                [79.55, 92.6, 97.7, 85.4, 94.75],
                [81.4, 80.95, 60.54, 77.2, 82.65],
                [98.5, 99.7, 95.05, 100, 100],
                [100, 100, 99.9, 100, 99.9],
                [100, 100, 99.9, 99.95, 100]
            ],
            40: [
                [99.75, 98.45, 97.7, 99.9, 66.5],
                [98.55, 93.45, 94.05, 94.65],
                [99.6, 97.5, 86.25, 99.2, 96],
                [86, 95.05, 84.4, 83.95, 51.65],
                [59.95, 60.05, 64.4, 91.25, 70.75],
                [99.7, 99.5, 98.75, 99.55, 92.8],
                [100, 100, 100, 100, 100],
                [100, 100, 100, 100, 100],

            ],
            100: [
                [100, 99, 99, 98.8, 91.2],
                [96.9, 97.9, 96.35, 99.95, 96.6],
                [96.1, 98.1, 88.7, 78, 84],
                [98.15, 91.6, 70.1, 91.2, 90.55],
                [95.7, 83.5, 63.85, 95.8, 93.1],
                [100, 100, 100, 99.95, 99.5],
                [100, 100, 100, 100, 100],
                []
            ],
            1600: [
                [99.95, 99.65, 99.55, 99.9, 98],
                [99.95, 97.85, 94.35, 99.55, 96.95],
                [95.9, 97.1, 99.9, 94.85, 96.95],
                [53.15, 92.96, 99.7, 99.6, 99.65],
                [95.6, 88.8, 50, 99.35, 99.55],
                [100, 99.7, 100, 100, 99.75],
                [97.2, 100, 100, 100, 100],
                [100, 99.89, 100, 100, 100]
            ]
        },
        # "first 2": {
        #     10: [
        #         [97.05, 58, 50.2, 99.1, 50.45],
        #         [49.05, 51.75, 58.1, 58.35, 47.35],
        #         [50.4, 52.95, 53.3, 88.85, 52.95],
        #         [51.45, 48.65, 52.3, 50.95, 50.25],
        #         [52, 50.8, 49.4, 50, 51.65],
        #         [49.7, 55.6, 51.15, 49.65, 61.4],
        #         [63.3, 51.15, 53, 50.85, 50.1],
        #         [54.09, 51.63, 54.85, 50.93, 49.82]
        #     ],
        #     1600: [
        #         [93.1, 98.55, 95, 100, 97.9],
        #         [99.55, 99.85, 99.45, 89.65, 87.55],
        #         [75.35, 98.95, 71.7, 50, 74.2],
        #         [96.6, 99.95, 96.4, 50],
        #         [50, 50, 50, 52.45, 51.8],
        #         [100, 96.45, 91.6, 92.25, 81.65],
        #         [97.4, 98.4, 100, 100, 96.7],
        #         [100, 100, 100, 99.3, 100]
        #     ]
        # },
        # "first 3": {
        #     10: [

        #     ],
        #     20: [

        #     ],
        #     40: [

        #     ],
        #     1600: [
        #         [96.65, 99.8, 96.85, 100, 89.8],
        #         [73.05, 88, 96.2, 99, 100],
        #         [87.7, 99.55, 100, 50, 99.8],
        #         [99.05, 53.65, 53.35, 99.75, 97.7],
        #         [50, 50, 98.2, 91.85, 52.4],
        #         [100, 96, 82.5, 100, 50],
        #         [100, 99.4, 100, 93.5, 50],
        #         [99.95, 100, 92.69, 100, 100]
        #     ]
        # },
        "2": {
            10: [

            ],
            20: [

            ],
            40: [

            ],
            1600: [
                [96.55, 96.55, 96.8, 95.9, 95.8],
                [90.15, 91, 90.9, 87.4, 89.05],
                [73.8, 72.15, 77.95, 73.95, 77.55],
                [58.75, 74.4, 58.1, 60.2],
                [56.4, 51.65, 54.3, 55],
                [92.05, 90.25, 84.85, 86.9],
                [98.7, 94.1, 94.3, 97.6, 98.1],
                [99.8, 92.98, 99.7, 99.6, 97.54]
            ]
        },
        "3": {
            1600: [
                [88.25, 86.7, 86, 69.85, 88.15],
                [74, 70.65, 73.25, 67],
                [53.05, 56.35, 55.8, 58.3, 58.05],
                [53.7, 53.4, 52.15, 52.75, 51.7],
                [48.85, 51, 50.8, 49.75, 49.75],
                [66.3, 82.1, 79.6, 65.35, 76.2],
                [96.95, 95.4, 98.25, 97.8, 77.7],
                [99.75, 98.9, 93.38, 97.24, 98.8]
            ]
        },
        "4": {
            1600: [
                [68.65, 79.75, 72.05, 74.35, 77.7],
                [63.5, 61.05, 59.55, 55.75],
                [53.85, 55.1, 54.85, 54.8],
                [51, 49.95, 50.85],
                [50.15, 49.7, 50.8],
                [55.15, 53.1, 55.7],
                [56.85, 56.25, 56.35],
                [63.87, 50.18, 67.49, 62.62, 67.59]
            ]
        },
    }

    focus_n = 20
    for n, v1 in raw_data.items():
        if n not in ["First Layer", "All"]:
            continue
        v2 = v1[focus_n]
        for i in range(len(v2)):
            for j in range(len(v2[i])):
                data.append([categories[i], v2[i][j], n])

    df = pd.DataFrame(data, columns=columns)
    sns_plot = sns.boxplot(x=columns[0], y=columns[1], hue=columns[2],
                           data=df, showfliers=False)

    if args.novtitle:
        plt.ylabel("", labelpad=0)

    # Accuracy range, with space to show good performance
    sns_plot.set(ylim=(45, 101))

    # Add dividing line in centre
    lower, upper = plt.gca().get_xlim()
    if args.dash:
        midpoint = (lower + upper) / 2
        plt.axvline(x=midpoint, color='white' if args.darkplot else 'black',
                    linewidth=1.0, linestyle='--')

    # Map range to numbers to be plotted
    targets_scaled = range(int((upper - lower)))
    # plt.plot(targets_scaled, baselines, color='C1', marker='x', linestyle='--')

    if not args.legend:
        plt.legend([], [], frameon=False)

    # Make sure axis label not cut off
    plt.tight_layout()

    sns_plot.figure.savefig("./plots/arxiv_%s.pdf" % str(focus_n))
    # sns_plot.figure.savefig("./plots/meta_boxplot_varying_n_%s.pdf" % str(focus_n))
